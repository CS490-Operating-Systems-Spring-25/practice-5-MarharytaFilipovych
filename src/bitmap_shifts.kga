label kernel_entry_point
// Initialize sys_stack_ptr to the top of memory
copy FREE_MEMORY_START to var:sys_stack_ptr
copy FREE_MEMORY_START to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to FREE_MEMORY_START
// Helper variables for keyboard input handling
var input_key

// Set background color to cyan
write COLOR_CYAN to DISPLAY_BACKGROUND
write OP_SET_BACKGROUND_COLOR to REG_OP
cpu_exec


var bitmap_ptr
// Define starting and ending address and length for the bitmap
var length
write 28 to var:length
var bitmap_start
var bitmap_end
copy FREE_MEMORY_START to var:bitmap_start
copy var:bitmap_start to var:bitmap_ptr


write "cccccccccccccccccccccccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccccccccccccccccccccccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccccccccccccccccccccccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "ccccccccccyyyyyyyycccccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccccccyyyyyyyyyyyyyyccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccccyyyyyyyyyyyyyyyyyyyyccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "ccccyyyyyyyyyyyyyyyyyyyyyccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccyyyyyyyyyyyyyyyyyyyyccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "ccyyyyyyyyyyyyyccccccccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "ccyyyyyyyyyccccccccccccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "ccyyyyyyyyyyyyyccccccccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccyyyyyyyyyyyyyyyyyyyyccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "ccccyyyyyyyyyyyyyyyyyyyyyccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccccyyyyyyyyyyyyyyyyyyyyccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccccccyyyyyyyyyyyyyyccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "ccccccccccyyyyyyyycccccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccccccccccccccccccccccccccc" to *var:bitmap_ptr
copy var:bitmap_ptr to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:bitmap_ptr
write "cccccccccccccccccccccccccccc" to *var:bitmap_ptr
// Save the end address of our bitmap
copy var:bitmap_ptr to var:bitmap_end

// Main program entry point
label main_loop
    // Render the current bitmap
    copy var:bitmap_start to REG_A
    copy var:bitmap_end to REG_B
    write OP_RENDER_BITMAP to REG_OP
    cpu_exec

    // Read keyboard input silently
    write KEYBOARD_READ_CHAR_SILENTLY to REG_A
    write OP_READ_INPUT to REG_OP
    cpu_exec
    copy KEYBOARD_BUFFER to var:input_key
 
    // Check if 'a' was pressed
    copy var:input_key to REG_A
    write "a" to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:handle_left_shift

    // Check if 'd' was pressed for right shift
    copy var:input_key to REG_A
    write "d" to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:handle_right_shift

    // Check if 'q' was pressed to exit
    copy var:input_key to REG_A
    write "q" to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:exit_program

    // Small delay before next input check
    write "0.1" to REG_A
    write OP_NOP to REG_OP
    cpu_exec

    jump label:main_loop

// Handler for left shift ('a' key)


var counter
write 1 to var:counter
var current_ptr


label handle_left_shift
    copy var:bitmap_start to var:current_ptr
    // Process each line in the bitmap
    label left_shift_loop
    copy *var:current_ptr to REG_A
    copy PROGRAM_COUNTER to var:sys_return
    jump label:left_shift  
    copy REG_RES to *var:current_ptr

    //increment ptr
    copy var:current_ptr to REG_A
    write OP_INCR to REG_OP
    cpu_exec
    copy REG_RES to var:current_ptr

    copy var:current_ptr to REG_A
    copy var:bitmap_end to REG_B
    write OP_CMP_LE to REG_OP
    cpu_exec
    jump_if label:left_shift_loop

    jump label:main_loop

// Handler for right shift ('d' key)
label handle_right_shift
     // Set up pointer to iterate through bitmap rows
    copy var:bitmap_start to var:current_ptr
    // Process each line in the bitmap
    label right_shift_loop
        copy *var:current_ptr to REG_A
        copy PROGRAM_COUNTER to var:sys_return
        jump label:right_shift
        copy REG_RES to *var:current_ptr

        // increment ptr
        copy var:current_ptr to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:current_ptr        
        // Check if we've processed all lines
        copy var:current_ptr to REG_A
        copy var:bitmap_end to REG_B
        write OP_CMP_LE to REG_OP
        cpu_exec
        jump_if label:right_shift_loop

    jump label:main_loop


// Function to shift the bitmap left
label left_shift
     copy PROGRAM_COUNTER to var:sys_stack_return
    jump label:sys_stack_push   
    var line_left
    copy REG_A to var:line_left
      
    write "c" to REG_B
    write "" to REG_C
    write OP_CONCAT_WITH to REG_OP
    cpu_exec
    copy REG_RES to var:line_left
    // increment length of bitmap
    copy var:length to REG_A
    write OP_INCR to REG_OP
    cpu_exec
    copy REG_RES to var:length

    //save new line
    copy var:line_left to REG_RES
    //finish
    jump label:sys_stack_pop

// Function to shift the bitmap right
label right_shift
    copy PROGRAM_COUNTER to var:sys_stack_return
    jump label:sys_stack_push   
    var line_right
    copy REG_A to var:line_right
      
    write "c" to REG_A
    copy var:line_right to REG_B
    write "" to REG_C
    write OP_CONCAT_WITH to REG_OP
    cpu_exec
    copy REG_RES to var:line_right

    // increment length of bitmap
    copy var:length to REG_A
    write OP_INCR to REG_OP
    cpu_exec
    copy REG_RES to var:length

    //save new line
    copy var:line_right to REG_RES
    //finish
    jump label:sys_stack_pop

// Exit program handler
label exit_program
    write "Good bye!" to DISPLAY_BUFFER
    write COLOR_GREEN to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec
    write OP_HALT to REG_OP
    cpu_exec

