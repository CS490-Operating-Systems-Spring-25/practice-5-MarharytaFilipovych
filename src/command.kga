// label kernel_entry_point
// // Initialize sys_stack_ptr to the top of memory
// copy FREE_MEMORY_START to var:sys_stack_ptr
// copy FREE_MEMORY_START to REG_A
// write OP_INCR to REG_OP
// cpu_exec
// copy REG_RES to FREE_MEMORY_START
// REG_A should contain the path to file that should be open. it may be absolute or relative path(sys_work_dir will be appended to it automatically)
//copy PROGRAM_COUNTER to var:sys_return
//jump label:modify_file
//reg_res will contain 1 and reg_error will contain nothing if modification successeded
//reg_res will contain 0 and reg_error will contain word ERROR if otherwise
var read_line

label modify_file
    copy PROGRAM_COUNTER to var:sys_stack_return
    jump label:sys_stack_push
    //open a file
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_fs_open
    var file_descriptor
    copy REG_RES to var:file_descriptor
    // Read it line by line:
    var counter
    write 1 to var:counter
    label read_file
        copy var:file_descriptor to REG_A
        copy var:counter to REG_B
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_read
        jump_err label:close

        // get first line
        copy REG_RES to var:read_line

        // successful read
        copy REG_ERROR to REG_A
        write "" to REG_B
        write OP_CMP_EQ to REG_OP
        cpu_exec
        jump_if label:modify

        //end_of_file
        copy REG_RES to REG_A
        write "EOF" to REG_B
        write OP_CMP_EQ to REG_OP
        cpu_exec
        jump_if_not label:error
        jump_if label:eof

    label modify
    // extract first char
        copy var:read_line to REG_A
        write 1 to REG_B
        write "" to REG_C
        cpu_exec
        var char
        copy REG_RES to var:char
        // check if char is number
        copy var:char to REG_A
        write OP_IS_NUM to REG_OP
        cpu_exec
        jump_if_not label:increment_counter

        //increment
        copy var:char to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:char

        //concat it with read_line
        copy var:char to REG_A
        copy var:read_line to REG_B
        write "" to REG_C
        write OP_CONCAT_WITH to REG_OP
        cpu_exec
        var modified_line
        copy REG_RES to var:modified_line

    label write_to_file
        copy var:file_descriptor to REG_A
        copy var:counter to REG_B
        copy var:modified_line to REG_C
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_write
        jump label:increment_counter
    
    label increment_counter
        copy var:counter to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:counter
        jump label:read_file

    label eof
        write "1" to REG_RES
        write "" to REG_ERROR
        jump label:close

    label error
        write "0" to REG_RES
        write "ERROR" to REG_ERROR
        jump label:close

    label close
        copy var:file_descriptor to REG_A
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_close 
        jump label:sys_stack_pop
    
    

